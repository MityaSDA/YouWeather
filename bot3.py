import telebot
import requests
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import os
import threading
import time
import pytz
from datetime import timezone

# === üîë –ö–ª—é—á–∏ ===
TELEGRAM_TOKEN = "your_token_boat_is_BotFather"
WEATHER_API_KEY = "your_API_key_—Å_weatherapi.com"
bot = telebot.TeleBot(TELEGRAM_TOKEN)
DATA_FILE = "users.json"

# === –¢–µ–º—ã —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç–æ–≤ ===
THEMES = {
    "light": {
        "sun": "‚òÄÔ∏è", "cloud": "üå§", "rain": "üåß", "snow": "‚ùÑÔ∏è", "night": "üåô",
        "header": "üü¶", "body": "‚¨ú", "accent": "üü®"
    },
    "dark": {
        "sun": "üåû", "cloud": "‚òÅÔ∏è", "rain": "üåßüí¶", "snow": "üå®", "night": "üåë",
        "header": "‚¨õ", "body": "‚¨õ", "accent": "üüß"
    },
}

# === –†–∞–±–æ—Ç–∞ —Å JSON ===
def load_user_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}

def save_user_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_prefs, f, ensure_ascii=False, indent=2)

user_prefs = load_user_data()

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ IP ===
def get_location_by_ip():
    try:
        res = requests.get("https://ipinfo.io/json", timeout=5)
        data = res.json()
        return data.get("city", "–ú–æ—Å–∫–≤–∞"), data.get("timezone", "Europe/Moscow")
    except:
        return "–ú–æ—Å–∫–≤–∞", "Europe/Moscow"

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã ===
def get_weather(city):
    try:
        url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&lang=ru"
        res = requests.get(url, timeout=10)
        res.raise_for_status()
        return res.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return {"error": "API error"}

def get_forecast(city):
    try:
        url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={city}&days=3&lang=ru"
        res = requests.get(url, timeout=10)
        res.raise_for_status()
        return res.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return {"error": "API error"}

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", callback_data="now"),
        InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast"),
    )
    kb.add(
        InlineKeyboardButton("üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow"),
        InlineKeyboardButton("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="theme"),
    )
    kb.add(
        InlineKeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city"),
        InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_time"),
    )
    kb.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="refresh_now")
    )
    return kb

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.chat.id)
    if user_id not in user_prefs:
        city, tz = get_location_by_ip()
        user_prefs[user_id] = {
            "city": city,
            "theme": "light",
            "timezone": tz,
            "morning_time": "08:00"
        }
        save_user_data()

    bot.send_message(
        user_id,
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç üå§\n"
        f"–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.\n\n"
        f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: <b>{user_prefs[user_id]['city']}</b>\n"
        f"–í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{user_prefs[user_id]['morning_time']}</b>",
        parse_mode="HTML",
        reply_markup=main_menu(),
    )

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    user_id = str(call.message.chat.id)
    if user_id not in user_prefs:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    prefs = user_prefs.get(user_id, {"city": "–ú–æ—Å–∫–≤–∞", "theme": "light", "timezone": "Europe/Moscow", "morning_time": "08:00"})
    city = prefs["city"]
    theme = prefs["theme"]

    if call.data == "now":
        data = get_weather(city)
        send_weather_now(call.message, data, theme)
    elif call.data == "forecast":
        data = get_forecast(city)
        send_forecast(call.message, data, theme)
    elif call.data == "tomorrow":
        data = get_forecast(city)
        send_tomorrow_forecast(call.message, data, theme)
    elif call.data == "change_city":
        bot.send_message(user_id, "üèô –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
        bot.register_next_step_handler(call.message, change_city)
    elif call.data == "theme":
        new_theme = "dark" if theme == "light" else "light"
        prefs["theme"] = new_theme
        user_prefs[user_id] = prefs
        save_user_data()
        bot.send_message(
            user_id,
            f"üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'üåô —Ç—ë–º–Ω—É—é' if new_theme == 'dark' else '‚òÄÔ∏è —Å–≤–µ—Ç–ª—É—é'}",
            reply_markup=main_menu(),
        )
    elif call.data == "set_time":
        bot.send_message(user_id, "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 07:30):")
        bot.register_next_step_handler(call.message, set_morning_time)
    elif call.data == "refresh_now":
        data = get_weather(city)
        send_weather_now(call.message, data, theme)

# === –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ ===
def set_morning_time(message):
    user_id = str(message.chat.id)
    time_text = message.text.strip()
    try:
        datetime.strptime(time_text, "%H:%M")
        user_prefs[user_id]["morning_time"] = time_text
        save_user_data()
        bot.send_message(user_id, f"‚úÖ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_text}", reply_markup=main_menu())
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 08:00)")
        bot.register_next_step_handler(message, set_morning_time)

def change_city(message):
    user_id = str(message.chat.id)
    city = message.text.strip()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º WeatherAPI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        weather_data = get_weather(city)
        if "error" in weather_data:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        tz = weather_data["location"]["tz_id"]
        user_prefs[user_id]["city"] = city
        user_prefs[user_id]["timezone"] = tz
        save_user_data()

        bot.send_message(
            user_id,
            f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{city}</b>",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã —Å —Ç–µ–º–æ–π ===
def send_weather_now(message, data, theme):
    if "error" in data:
        bot.send_message(message.chat.id, "üòï –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    loc = data["location"]["name"]
    temp = data["current"]["temp_c"]
    feels = data["current"]["feelslike_c"]
    cond = data["current"]["condition"]["text"]
    icon_url = "https:" + data["current"]["condition"]["icon"]
    hum = data["current"]["humidity"]
    wind = data["current"]["wind_kph"]
    time_msg = datetime.strptime(data["location"]["localtime"], "%Y-%m-%d %H:%M")
    emoji_theme = THEMES[theme]

    msg = (
        f"{emoji_theme['header']} <b>{loc}</b> {emoji_theme['header']}\n"
        f"üïí {time_msg.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"{emoji_theme['body']}{emoji_theme['cloud']} <b>{cond}</b>\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á  üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\n"
        f"{emoji_theme['accent']} –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! {emoji_theme['accent']}"
    )

    bot.send_photo(message.chat.id, icon_url, caption=msg, parse_mode="HTML", reply_markup=main_menu())

def send_forecast(message, data, theme):
    if "error" in data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    city = data["location"]["name"]
    forecast_days = data["forecast"]["forecastday"]
    emoji_theme = THEMES[theme]

    msg = f"{emoji_theme['header']} <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}</b> {emoji_theme['header']}\n\n"
    for day in forecast_days:
        date = datetime.strptime(day["date"], "%Y-%m-%d").strftime("%d.%m")
        condition = day["day"]["condition"]["text"]
        temp_min = day["day"]["mintemp_c"]
        temp_max = day["day"]["maxtemp_c"]
        msg += f"{emoji_theme['body']}{emoji_theme['cloud']} {date}: {condition}, {temp_min}¬∞C ‚Üí {temp_max}¬∞C\n"

    bot.send_message(message.chat.id, msg, parse_mode="HTML", reply_markup=main_menu())

def send_tomorrow_forecast(message, data, theme):
    if "error" in data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    tomorrow = data["forecast"]["forecastday"][1]
    date = datetime.strptime(tomorrow["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
    condition = tomorrow["day"]["condition"]["text"]
    temp_min = tomorrow["day"]["mintemp_c"]
    temp_max = tomorrow["day"]["maxtemp_c"]
    icon = "https:" + tomorrow["day"]["condition"]["icon"]
    emoji_theme = THEMES[theme]

    msg = (
        f"{emoji_theme['header']} <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({date})</b> {emoji_theme['header']}\n"
        f"{emoji_theme['body']}{emoji_theme['cloud']} {condition}\n"
        f"üå° –ú–∏–Ω: {temp_min}¬∞C ‚Üí –ú–∞–∫—Å: {temp_max}¬∞C\n"
        f"{emoji_theme['accent']} –ë—É–¥—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–≥–æ–¥–µ! {emoji_theme['accent']}"
    )

    bot.send_photo(message.chat.id, icon, caption=msg, parse_mode="HTML", reply_markup=main_menu())

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===
def send_morning_forecast(user_id, prefs):
    city = prefs.get("city", "–ú–æ—Å–∫–≤–∞")
    theme = prefs.get("theme", "light")
    data = get_forecast(city)
    
    if data.get("error") is None:
        day = data["forecast"]["forecastday"][0]["day"]
        condition = day["condition"]["text"]
        min_t = day["mintemp_c"]
        max_t = day["maxtemp_c"]
        icon = "https:" + day["condition"]["icon"]
        msg = (
            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–°–µ–≥–æ–¥–Ω—è –≤ <b>{city}</b>:\n"
            f"{THEMES[theme]['cloud']} {condition}\n"
            f"üå° {min_t}¬∞C ‚Üí {max_t}¬∞C\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ‚òï"
        )
        try:
            bot.send_photo(user_id, icon, caption=msg, parse_mode="HTML")
        except:
            bot.send_message(user_id, msg, parse_mode="HTML")

def send_auto_update(user_id, prefs):
    city = prefs.get("city", "–ú–æ—Å–∫–≤–∞")
    theme = prefs.get("theme", "light")
    data = get_weather(city)
    
    if data.get("error") is None:
        loc = data["location"]["name"]
        temp = data["current"]["temp_c"]
        feels = data["current"]["feelslike_c"]
        cond = data["current"]["condition"]["text"]
        icon = "https:" + data["current"]["condition"]["icon"]
        msg = (
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è <b>{loc}</b>:\n"
            f"{THEMES[theme]['cloud']} {cond}\n"
            f"üå° {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C"
        )
        try:
            bot.send_photo(user_id, icon, caption=msg, parse_mode="HTML")
        except:
            bot.send_message(user_id, msg, parse_mode="HTML")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º ===
def scheduled_updates():
    while True:
        now_utc = datetime.now(timezone.utc)
        processed_users = set()  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        for user_id, prefs in user_prefs.items():
            if user_id in processed_users:
                continue
                
            try:
                tz_str = prefs.get("timezone", "Europe/Moscow")
                tz = pytz.timezone(tz_str)
                now_local = now_utc.astimezone(tz)

                # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞
                morning_time = prefs.get("morning_time", "08:00")
                hour, minute = map(int, morning_time.split(":"))
                
                if now_local.hour == hour and now_local.minute == minute:
                    send_morning_forecast(user_id, prefs)
                    processed_users.add(user_id)

                # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (—Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
                elif now_local.minute == 0 and now_local.hour % 3 == 0:
                    send_auto_update(user_id, prefs)
                    processed_users.add(user_id)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
        time.sleep(60)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=scheduled_updates, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    bot.infinity_polling()
